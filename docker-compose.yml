version: '3.9'

services:
  # MongoDB for BookingService
  mongo-booking:
    image: mongo:latest
    container_name: mongo-booking
    ports:
      - "27025:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/booking:/data/db
      - .init/mongo/docker-entrypoint-initdb.d/booking-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - boot
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  # MongoDB for EventService
  mongo-event:
    image: mongo:latest
    container_name: mongo-event
    ports:
      - "27024:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/event:/data/db
      - .init/mongo/docker-entrypoint-initdb.d/event-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - boot
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  # MongoDB for ApprovalService
  mongo-approval:
    image: mongo:latest
    container_name: mongo-approval
    ports:
      - "27023:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/approval:/data/db
      - .init/mongo/docker-entrypoint-initdb.d/approval-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - boot
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 30s
      timeout: 10s
      retries: 5

#  # PostgreSQL for RoomService
  postgres-room:
    image: postgres
    container_name: postgresRoom
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=room-service
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/room:/var/lib/postgresql/data
      - ./init/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - boot
  # PostgreSQL for UserService
  postgres-user:
    image: postgres
    ports:
      - "5435:5432"
    container_name: postgresUser
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=user-service
    volumes:
      - ./data/user:/var/lib/postgresql/data
      - ./init/user/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - boot
#
#  # BookingService
  booking-service:
    image: booking-service
    ports:
      - "8093:8093"
    build:
      context: ./booking-service
      dockerfile: ./Dockerfile
    container_name: booking-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27025
    depends_on:
      - mongo-booking
    networks:
      - boot

#  # RoomService
  room-service:
    image: room-service
    ports:
      - "8090:8090"
    build:
      context: ./room-service
      dockerfile: ./Dockerfile
    container_name: room-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5434/room-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - postgres-room
    networks:
      - boot

   #EventService
  event-service:
    image: event-service
    ports:
      - "8092:8092"
    build:
      context: ./event-service
      dockerfile: ./Dockerfile
    container_name: event-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27024
    depends_on:
      - mongo-event
    networks:
      - boot

  # UserService
  user-service:
    image: user-service
    ports:
      - "8091:8091"
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    container_name: user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5435/user-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - postgres-user
    networks:
      - boot

  approval-service:
    image: approval-service
    ports:
      - "8094:8094"
    build:
      context: ./approval-service
      dockerfile: ./Dockerfile
    container_name: approval-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27023
    depends_on:
      - mongo-approval
    networks:
      - boot

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8892:80"
    container_name: pgadmin-gbceventbooking
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    networks:
      - boot

    # Mongo Express for MongoDB management
  mongo-express:
      image: mongo-express:latest
      container_name: mongoExpress
      environment:
        - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
        - ME_CONFIG_MONGODB_ADMINPASSWORD=password
        - ME_CONFIG_MONGODB_SERVER=mongo-booking
      ports:
        - "8084:8081"
      depends_on:
        - mongo-booking

volumes:
  mongo-event:
    driver: local
  mongo-booking:
    driver: local
  mongo-approval:
    driver: local
  posgres-user:
    driver: local
  posgres-room:
    driver: local

networks:
  boot:
    driver: bridge


